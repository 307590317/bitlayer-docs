"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4409],{206:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(4848),i=r(5680);const a={sidebar_position:3},o="Bitlayer's Transaction Lifecycle",s={id:"BitlayerArchitecture/TransactionLifecycle",title:"Bitlayer's Transaction Lifecycle",description:"The Bitlayer asset bridge provides user-controlled decentralized custody, as well as a high-liquidity Bitcoin Layer 2 cross-chain solution based on BitVM+DLC technology. Bitlayer offers a dual-channel two-way peg bridge that not only meets the self-controlled asset needs of Layer 1 users for BTC deposit and withdrawal, but also satisfies the smooth withdrawal requirements of native Layer 2 users. The core components of the asset bridge consist of BitVM Federation nodes, DLC components, Layer 2 smart contracts, and Relayers:",source:"@site/docs/BitlayerArchitecture/TransactionLifecycle.md",sourceDirName:"BitlayerArchitecture",slug:"/BitlayerArchitecture/TransactionLifecycle",permalink:"/docs/BitlayerArchitecture/TransactionLifecycle",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Layered Virtual Machine (LVM)",permalink:"/docs/BitlayerArchitecture/LVM"},next:{title:"Bitlayer Scan APIs",permalink:"/docs/category/bitlayer-scan-apis"}},c={},l=[{value:"1. BitVM Federation",id:"1-bitvm-federation",level:2},{value:"2. DLC Components",id:"2-dlc-components",level:2},{value:"3. Layer 2 Smart Contracts",id:"3-layer-2-smart-contracts",level:2},{value:"4. Relayers",id:"4-relayers",level:2}];function d(e){const t={h1:"h1",h2:"h2",p:"p",...(0,i.RP)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"bitlayers-transaction-lifecycle",children:"Bitlayer's Transaction Lifecycle"}),"\n",(0,n.jsx)(t.p,{children:"The Bitlayer asset bridge provides user-controlled decentralized custody, as well as a high-liquidity Bitcoin Layer 2 cross-chain solution based on BitVM+DLC technology. Bitlayer offers a dual-channel two-way peg bridge that not only meets the self-controlled asset needs of Layer 1 users for BTC deposit and withdrawal, but also satisfies the smooth withdrawal requirements of native Layer 2 users. The core components of the asset bridge consist of BitVM Federation nodes, DLC components, Layer 2 smart contracts, and Relayers:"}),"\n",(0,n.jsx)(t.h2,{id:"1-bitvm-federation",children:"1. BitVM Federation"}),"\n",(0,n.jsx)(t.p,{children:"The nodes within the BitVM Federation act as a verification network to ensure the secure execution of Layer 2 transactions and the stable operation of the Bitlayer bridge. When Layer 2 begins, validated organizations can join the federation by depositing a specific amount of BTC. As the Layer 2 network progresses, the federation dynamically adjusts and increases its membership to boost security and decentralization. Within the cross-chain bridge, the BitVM Federation collectively manages decentralized asset custody for the BitVM bridge channel, attaining a 1 of (N) security level, meaning only one honest node is needed for network integrity. Moreover, the BitVM Federation functions as an oracle network for the OP-DCL bridge channel, requiring only some members to agree ((t) of (N)) to produce a legitimate oracle signature."}),"\n",(0,n.jsx)(t.h2,{id:"2-dlc-components",children:"2. DLC Components"}),"\n",(0,n.jsx)(t.p,{children:"Using DLC for deposits and withdrawals ensures users' autonomous control over their assets but introduces restrictions on the BTC amount for deposits and withdrawals. Because DLC requires predefined CETs to determine the withdrawal amount, supporting fine-grained CETs is necessary to meet user-friendly withdrawal requirements. The first function of the DLC component is to facilitate the creation of funding transactions, where the assets are initially output to a 2 of 2 multi-sig output, with the parties involved being the user and the BitVM Federation ((N) of (N)) address. The second function is the CET manager, which pre-creates DLCs supporting multiple future withdrawal requirements, thus realizing a user-friendly cross-chain solution."}),"\n",(0,n.jsx)(t.h2,{id:"3-layer-2-smart-contracts",children:"3. Layer 2 Smart Contracts"}),"\n",(0,n.jsx)(t.p,{children:"The bridge and light client are two core smart contracts on Layer 2 that implement the trustless bridge. The bridge smart contract manages the issuance and destruction of BTC assets on Layer 2. The light client contract maintains Bitcoin block header information on Layer 2, and Bitlayer uses ZKP-based Bitcoin state proofs to update and maintain the block header information. The light client contract also provides a Verify function to validate Bitcoin transactions, by submitting a Simplified Payment Verification (SPV) proof of the transaction to the light client contract to verify the legitimacy of the Bitcoin transaction. The bridge contract calls the light client's Verify function to validate the legitimacy of users' locking transactions on Bitcoin, ensuring that all BTC assets on Layer 2 are issued in a trustless manner."}),"\n",(0,n.jsx)(t.h2,{id:"4-relayers",children:"4. Relayers"}),"\n",(0,n.jsx)(t.p,{children:"The Relayer plays a critical, trustless role in the Bitlayer asset bridge, primarily tasked with monitoring both Layer 1 and Layer 2 blockchains and updating the state of light client data on the Layer 2 blockchain. When the Bitcoin network commits a new block, the relayer submits a state update transaction for the light client, accompanied by a zero-knowledge proof. Whenever there is a bridge transaction, the relayer forwards it to a smart contract (peg-in) or a BitVM Federation node (peg-out) for further processing. The inclusion of this permissionless relayer system ensures the continuous operation of the asset bridge; the bridge remains functional as long as at least one relayer is operational."})]})}function h(e={}){const{wrapper:t}={...(0,i.RP)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},5680:(e,t,r)=>{r.d(t,{RP:()=>l});var n=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=l(r),f=i,y=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return r?n.createElement(y,o(o({ref:t},h),{},{components:r})):n.createElement(y,o({ref:t},h))}));h.displayName="MDXCreateElement"}}]);